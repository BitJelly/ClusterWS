// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../uws

import * as WebSocket from 'uws';

export default class ClusterWS {
    constructor(configurations: Configurations);
}

export function BrokerServer(port: number, key: string, horizontalScaleOptions: HorizontalScaleOptions | false): void;
export function BrokerClient(url: string, key: string, broadcaster: any, reconnected?: boolean): void;

export class EventEmitter {
    on(event: 'error', listener: (err: Error) => void): void;
    on(event: 'connection', listener: (socket: WebSocket) => void): void;
    on(event: 'close', listener: (code?: number, reason?: string) => void): void;
    on(event: string, listener: Listener): void;
    emit(event: string, message: Message): void;
    emit(event: string, ...args: any[]): void;
    onmany(event: string, listener: Listener): void;
    emitmany(event: string, ...args: any[]): void;
    removeListener(event: string, listener: Listener): any;
    removeEvent(event: string): void;
    removeEvents(): void;
}

export class WSServer extends EventEmitter {
    middleware: CustomObject;
    setMiddleware(name: 'onSubscribe', listener: (socket: any, channel: string, next: Listener) => void): void;
    setMiddleware(name: 'onMessageFromWorker', listener: (message: Message) => void): void;
    setMiddleware(name: 'verifyConnection', listener: (info: CustomObject, next: Listener) => void): void;
    broadcastMessage(x: string, message: any): void;
    setBroker(br: WebSocket, url: string): void;
}

export class Worker {
    options: Options;
    wss: WSServer;
    constructor(options: Options, key: string);
}

export function logError<T>(data: T): any;
export function logReady<T>(data: T): any;
export function logWarning<T>(data: T): any;
export function generateKey(length: number): string;
export type Message = any;
export type Listener = (...args: any[]) => void;
export type WorkerFunction = () => void;
export interface CustomObject {
    [propName: string]: any;
}
export interface TlsOptions {
    ca?: string;
    pfx?: string;
    key?: string;
    cert?: string;
    passphrase?: string;
}
export interface HorizontalScaleOptions {
    k: number;
}
export interface Configurations {
    worker: WorkerFunction;
    port?: number;
    workers?: number;
    brokers?: number;
    useBinary?: boolean;
    brokersPorts?: number[];
    tlsOptions?: TlsOptions;
    pingInterval?: number;
    restartWorkerOnFail?: boolean;
    horizontalScaleOptions?: HorizontalScaleOptions;
}
export interface Options {
    worker: WorkerFunction;
    port: number;
    workers: number;
    brokers: number;
    useBinary: boolean;
    brokersPorts: number[];
    tlsOptions: TlsOptions | false;
    pingInterval: number;
    restartWorkerOnFail: boolean;
    horizontalScaleOptions: HorizontalScaleOptions | false;
}

