// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../node_modules/ts-builder/uws

import * as WebSocket from 'uws';

export class ClusterWS {
    constructor(configurations: IPassedOptions);
}

export class Broker {
    static Client(url: string, key: string, broadcaster: SocketServer | any, isReconnected?: boolean): void;
    static Server(port: number, info: any): void;
}

export function masterProcess(options: IOptions): void;

export class EventEmitter {
    on(event: string, listener: any): void;
    emit(event: string, ...args: any[]): void;
    removeListener(event: string, listener: any): void;
    removeEvent(event: string): void;
    removeEvents(): void;
}

export interface IOptions {
    port: number;
    worker: any;
    workers: number;
    brokerPort: number;
    pingInterval: number;
    restartWorkerOnFail: boolean;
    useBinary: boolean;
    machineScale?: {
        master: boolean;
        port: number;
        url?: string;
        externalKey?: string;
    };
}
export interface IPassedOptions {
    port?: number;
    worker: any;
    workers?: number;
    brokerPort?: number;
    pingInterval?: number;
    restartWorkerOnFail?: boolean;
    useBinary?: boolean;
    machineScale?: {
        master: boolean;
        port: number;
        url?: string;
        externalKey?: string;
    };
}
export interface IProcessMessage {
    event: string;
    data: any;
}
export function logError(data: any): any;
export function logReady(data: any): any;
export function logWarning(data: any): any;

export function workerProcess(options: IOptions): void;

export function socketEncodeMessages(event: string, data: any, type: string): any;
export function socketDecodeMessages(socket: Socket, message: any): any;

export class Socket {
    socket: any;
    server: Worker;
    channels: any[];
    events: EventEmitter;
    constructor(socket: any, server: Worker);
    on(event: string, listener: any): void;
    send(event: string, data: any, type?: string): void;
    disconnect(code: number, reason: string): void;
}

export class SocketServer extends EventEmitter {
    middleware: any;
    constructor();
    publish(channel: string, data: any): void;
    setBroker(socketBroker: WebSocket): void;
}

export class Worker {
    options: IOptions;
    httpServer: any;
    socketServer: SocketServer;
    constructor(options: IOptions, info: any);
}

